buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://maven.scijava.org/content/repositories/releases"
        }
    }
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
}

plugins {
  id 'java'
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'idea'


[
	compileJava,
	compileTestJava
]*.options*.encoding = 'UTF-8'






//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src/java' }
		resources
		{  srcDir 'src/java' }
	}
	test
	{
		java
		{ srcDir 'src/java' }
		resources
		{  srcDir 'src/java' }
	}
}

javadoc { options.charSet = 'UTF-8' }

sourceCompatibility = 1.8
targetCompatibility = 1.8

test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}


def versionOverrides = [
	"org.jdom:jdom2": "2.0.5"
]

configurations.all
{
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	resolutionStrategy.force("org.jdom:jdom2:2.0.5")
}


dependencies
{
  implementation 'commons-lang:commons-lang:2.6'
  implementation 'commons-io:commons-io:2.11.0'
  implementation 'net.sf.trove4j:trove4j:3.0.3'
  implementation 'args4j:args4j:2.33'
  implementation 'com.apple:AppleJavaExtensions:1.4'
  implementation 'com.miglayout:miglayout-core:5.3'
  implementation 'com.miglayout:miglayout-swing:5.3'
  implementation 'com.miglayout:miglayout-swt:5.3'

	
  //ClearCL:
  api 'net.clearvolume:clearcl:0.5.2' 

  //ClearAudio:
  api 'net.clearvolume:clearaudio:1.0.2'

  //ClearGL:
  implementation ('net.clearvolume:cleargl:2.2.6')  {transitive= true; changing= true}
	
  implementation group: 'junit', name: 'junit', version: '4.12'
  testImplementation group: 'junit', name: 'junit', version: '4.12'

}

repositories
{
	mavenCentral()
	mavenLocal()
	maven { url "https://maven.scijava.org/content/groups/public" }
}


task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
   duplicatesStrategy = 'exclude'
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}


//***********************************************************************************
// NATIVE CODE BUILDING
 
 import org.apache.tools.ant.taskdefs.condition.Os
 
 String cmakefolder = "./build/cmake"
 File lCMakeFile = file(cmakefolder)
 lCMakeFile.mkdirs()
 
 // cmake task:
 task cmake(type:Exec) {
 
 	 inputs.file './build.gradle'
	 inputs.dir file('./src/cpp')
	 outputs.dir lCMakeFile.absolutePath
 
	 workingDir cmakefolder
 
	 def cmake_args = [] as List
	
 
	 if (Os.isFamily(Os.FAMILY_WINDOWS))
	 {
	 	 println 'We are on Windows, using 64bit build'
	 	 cmake_args.add('-G')
	 	 cmake_args.add('\"Visual Studio 12 2013 Win64\"')
	 	 cmake_args.add('..\\..\\src\\cpp')
		 executable 'cmake'
		 args cmake_args
	 }
	 else if (Os.isFamily(Os.FAMILY_MAC))
	 {
	 	 cmake_args.add('../../src/cpp')
		 executable 'cmake'
		 args cmake_args
	 }
	 else if (Os.isFamily(Os.FAMILY_UNIX))
	 {
		 executable 'cmake'
		 args cmake_args
	 }
 
	 println commandLine
 }
 
 
 
 // make task:
 task make(type:Exec) {
 

 	 inputs.file './build.gradle'
	 inputs.dir lCMakeFile.absolutePath
	 outputs.dir lCMakeFile.absolutePath
	 
	 workingDir cmakefolder
 
	 def make_args = [] as List
 
	 if (Os.isFamily(Os.FAMILY_WINDOWS))
	 {
	 	make_args.add('--build')
	 	make_args.add('.')
	 	make_args.add('--config')
	 	make_args.add('Release')
		executable 'cmake'
		args make_args
	 }
	 else if (Os.isFamily(Os.FAMILY_MAC))
	 {
		executable 'make'
		args make_args
	 }
	 else if (Os.isFamily(Os.FAMILY_UNIX))
	 {
		executable 'make'
		args make_args
	 }
 
	 println commandLine
 }
 
make.dependsOn cmake

jar {
   manifest {
      attributes 'Main-Class': 'clearvolume.main.ClearVolume' 
   }
}

build.dependsOn jar

//***********************************************************************************
// CVLIB PACKAGING TASKS

task packagecvlib {

	/*inputs.file './build.gradle'
	inputs.dir './build/cmake/'
	inputs.dir './build/cmake/build/output'
	inputs.dir './build/cmake/build/output/Release'
	inputs.dir './src/cpp/examples'
	inputs.dir './src/cpp/include'
	inputs.dir './build/libs/'
	outputs.dir file('./build/cvlib/')
	outputs.dir file('./build/cvlib/jars')/**/
	
	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("mac"))
	{
		doLast{
			copy
			{
				from('./build/cmake/')
				into('./build/cvlib/')
				include('libclearvolume.*','clearvolume.*')
			}
	
			copy
			{
				from('./build/cmake/build/output')
				into('./build/cvlib/')
				include('*')
			}
	
			
		}
	}
	else if (os.contains("win"))
	{
		doLast{
			copy
			{
				from('./build/cmake/build/output/Release')
				into('./build/cvlib/')
				include('*')
			}
	
		}
	}

	doLast{
		copy
		{
			from('./src/cpp/examples')
			into('./build/cvlib/')
			include('*.cpp')
		}

		copy
		{
			from('./src/cpp/include')
			into('./build/cvlib/')
			include('*.h')
		}

		file('./build/cvlib/jars').mkdirs()
		copy
		{
			from('./build/libs/')
			into('./build/cvlib/jars')
			include('ClearVolume.fat.jar')
			rename('ClearVolume.fat.jar','ClearVolume.jar')
		}
	}
}

packagecvlib.dependsOn jar
packagecvlib.dependsOn make

task packagelvcvlib {

	/*inputs.file './build.gradle'
	inputs.dir './src/labview/'
	inputs.dir './src/labview/lvcvlib'
	inputs.dir './src/labview/lvcvlib/VIs'
	inputs.dir './build/cvlib/'
	inputs.dir './build/libs/'
	outputs.dir file('./build/labview/')/**/
	
	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("win") || os.contains("mac"))
	{
		doLast{
			copy
			{
				from('./src/labview/')
				into('./build/labview/')
				include('*')
			}
	
			copy
			{
				from('./src/labview/clearvolume')
				into('./build/labview/clearvolume/')
				include('*')
			}
	
			copy
			{
				from('./src/labview/clearvolume/VIs')
				into('./build/labview/clearvolume/VIs')
				include('*')
			}

			copy
			{
				from('./src/labview/clearvolume/subvi')
				into('./build/labview/clearvolume/subvi')
				include('*')
			}
	
			copy
			{
				from('./build/cvlib/')
				into('./build/labview/clearvolume/')
				include('*.dll')
			}
	
			copy
			{
				from('./build/libs/')
				into('./build/labview/clearvolume')
				include('ClearVolume.fat.jar')
				rename('ClearVolume.fat.jar','ClearVolume.jar')
			}
		}
	}
}

packagelvcvlib.dependsOn packagecvlib





//***********************************************************************************
// DISTRIBUTION PACKAGING TASKS

task distribution {

	inputs.file './build.gradle'
	//inputs.dir './build/executable/'
	//inputs.dir './build/labview/'
	//inputs.dir './build/cvlib/'
	//inputs.dir './build/libs/'
	//outputs.dir './build/distribution/'
	
	doLast{
		copy
		{
			from('./build/executable/')
			into('./build/distribution/')
			include "*"
		}
	
		copy
		{
			from('./build/labview/')
			into('./build/distribution/labview')
			include "*"
			include '**/**'
			include '**/**/**'
			include '**/**/**/**/'
		}
	
		copy
		{
			from('./build/cvlib/')
			into('./build/distribution/cvlib')
			include "*"
		}
	
		copy
		{
			from('./build/libs/')
			into('./build/distribution/javalibs')
			include "*.*"
			include '**/**'
			exclude '**/*capsule.jar'
		}
	}

}

distribution.dependsOn make
distribution.dependsOn packagecvlib
distribution.dependsOn packagelvcvlib
distribution.dependsOn jar


task packagezip(type:Exec,dependsOn:distribution) {

	def os = System.getProperty("os.name").toLowerCase()
	//println "OS:"+os
	//if (os.contains("nix") || os.contains("mac"))
	//	{
	workingDir '.'
	commandLine './scripts/packagezip.sh'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {return standardOutput.toString()}
	//}
}


task collectDependencies(type: Copy) {
	into "./build/libs/dependencies"
	//from configurations.runtime
}


//***********************************************************************************
// PUBLISHING

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
	->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

group = 'net.clearvolume'

if(project.hasProperty('releasebuild')) {
    version = getVersionName()
} else {
    version = getVersionName() + ".1-SNAPSHOT"
}

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = 'net.clearvolume'
			artifactId = 'clearvolume'
			version = project.version
			from components.java

			artifact sourcesJar { classifier "sources" }
			artifact javadocJar { classifier "javaDoc" }
		}
	}
	repositories {
		maven {
			credentials {
				username = "$System.env.MAVEN_USER"
				password = "$System.env.MAVEN_PASS"
			}

			def releasesRepoUrl =  "https://maven.scijava.org/content/repositories/releases"
			def snapshotsRepoUrl =  "https://maven.scijava.org/content/repositories/snapshots"
         url = project.hasProperty('releaseBuild') ? releasesRepoUrl : snapshotsRepoUrl		
		}
	}
}
